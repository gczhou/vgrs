/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#![allow(non_camel_case_types, dead_code)]

pub use self::Vg_ClientRequest::*;
pub use self::Vg_MemCheckClientRequest::*;
pub use self::Vg_CallgrindClientRequest::*;
pub use self::Vg_TCheckClientRequest::*;
pub use self::Vg_DRDClientRequest::*;

macro_rules! VG_USERREQ_TOOL_BASE ( ($a:expr, $b:expr) => (
    ((($a as int) & 0xff) << 24)
  | ((($b as int) & 0xff) << 16)));

#[repr(C)]
pub enum Vg_ClientRequest {
    VG_USERREQ__RUNNING_ON_VALGRIND  = 0x1001,
    VG_USERREQ__DISCARD_TRANSLATIONS = 0x1002,
    VG_USERREQ__CLIENT_CALL0 = 0x1101,
    VG_USERREQ__CLIENT_CALL1 = 0x1102,
    VG_USERREQ__CLIENT_CALL2 = 0x1103,
    VG_USERREQ__CLIENT_CALL3 = 0x1104,
    VG_USERREQ__COUNT_ERRORS = 0x1201,
    VG_USERREQ__GDB_MONITOR_COMMAND = 0x1202,
    VG_USERREQ__MALLOCLIKE_BLOCK = 0x1301,
    VG_USERREQ__RESIZEINPLACE_BLOCK = 0x130b,
    VG_USERREQ__FREELIKE_BLOCK   = 0x1302,
    VG_USERREQ__CREATE_MEMPOOL   = 0x1303,
    VG_USERREQ__DESTROY_MEMPOOL  = 0x1304,
    VG_USERREQ__MEMPOOL_ALLOC    = 0x1305,
    VG_USERREQ__MEMPOOL_FREE     = 0x1306,
    VG_USERREQ__MEMPOOL_TRIM     = 0x1307,
    VG_USERREQ__MOVE_MEMPOOL     = 0x1308,
    VG_USERREQ__MEMPOOL_CHANGE   = 0x1309,
    VG_USERREQ__MEMPOOL_EXISTS   = 0x130a,
    VG_USERREQ__PRINTF           = 0x1401,
    VG_USERREQ__PRINTF_BACKTRACE = 0x1402,
    VG_USERREQ__PRINTF_VALIST_BY_REF = 0x1403,
    VG_USERREQ__PRINTF_BACKTRACE_VALIST_BY_REF = 0x1404,
    VG_USERREQ__STACK_REGISTER   = 0x1501,
    VG_USERREQ__STACK_DEREGISTER = 0x1502,
    VG_USERREQ__STACK_CHANGE     = 0x1503,
    VG_USERREQ__LOAD_PDB_DEBUGINFO = 0x1601,
    VG_USERREQ__MAP_IP_TO_SRCLOC = 0x1701,
    VG_USERREQ__CHANGE_ERR_DISABLEMENT = 0x1801,
}

#[repr(C)]
pub enum Vg_MemCheckClientRequest {
    VG_USERREQ__MAKE_MEM_NOACCESS = VG_USERREQ_TOOL_BASE!('M','C'),
    VG_USERREQ__MAKE_MEM_UNDEFINED,
    VG_USERREQ__MAKE_MEM_DEFINED,
    VG_USERREQ__DISCARD,
    VG_USERREQ__CHECK_MEM_IS_ADDRESSABLE,
    VG_USERREQ__CHECK_MEM_IS_DEFINED,
    VG_USERREQ__DO_LEAK_CHECK,
    VG_USERREQ__COUNT_LEAKS,
    VG_USERREQ__GET_VBITS,
    VG_USERREQ__SET_VBITS,
    VG_USERREQ__CREATE_BLOCK,
    VG_USERREQ__MAKE_MEM_DEFINED_IF_ADDRESSABLE,
    VG_USERREQ__COUNT_LEAK_BLOCKS,
}

#[repr(C)]
pub enum Vg_CallgrindClientRequest {
    VG_USERREQ__DUMP_STATS = VG_USERREQ_TOOL_BASE!('C','T'),
    VG_USERREQ__ZERO_STATS,
    VG_USERREQ__TOGGLE_COLLECT,
    VG_USERREQ__DUMP_STATS_AT,
    VG_USERREQ__START_INSTRUMENTATION,
    VG_USERREQ__STOP_INSTRUMENTATION,
}

#[repr(C)]
pub enum Vg_TCheckClientRequest {
    VG_USERREQ__HG_CLEAN_MEMORY = VG_USERREQ_TOOL_BASE!('H','G'),
    _Vg_TCheckClientRequest_dummy, // suppress error about univariant enum repr
}

#[repr(C)]
pub enum Vg_DRDClientRequest {
   // Binary compatible with the similar Helgrind request above
   VG_USERREQ__DRD_CLEAN_MEMORY = VG_USERREQ_TOOL_BASE!('H','G'),

   VG_USERREQ__DRD_GET_VALGRIND_THREAD_ID = VG_USERREQ_TOOL_BASE!('D','R'),
   VG_USERREQ__DRD_GET_DRD_THREAD_ID,
   VG_USERREQ__DRD_START_SUPPRESSION,
   VG_USERREQ__DRD_FINISH_SUPPRESSION,
   VG_USERREQ__DRD_START_TRACE_ADDR,
   VG_USERREQ__DRD_STOP_TRACE_ADDR,
   VG_USERREQ__DRD_RECORD_LOADS,
   VG_USERREQ__DRD_RECORD_STORES,
   VG_USERREQ__DRD_SET_THREAD_NAME,
}
